name: PostgreSQL Table Creation Benchmark

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      num_tables:
        description: "Number of tables to generate (e.g. 100000)"
        required: false
        default: 10000

jobs:
  benchmark:
    runs-on: ubuntu-latest
    
    services:
      postgres-default:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      postgres-optimized:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
        # GitHub Actions doesn't support command directly, we'll handle optimization via psql
      
      postgres-tmpfs:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --tmpfs /var/lib/postgresql/data:size=2G
        ports:
          - 5434:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Create results directory
      run: mkdir -p results
    
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client bc
    
    - name: Install GNU parallel
      run: |
        sudo apt-get install -y parallel
    
    - name: Generate table schemas
      env:
        # Use workflow_dispatch input if provided; otherwise default to 100000
        NUM_TABLES: ${{ github.event.inputs.num_tables != '' && github.event.inputs.num_tables || '10000' }}
      run: |
        chmod +x scripts/generate_tables.sh
        bash scripts/generate_tables.sh "$NUM_TABLES"
    
    - name: Setup optimized PostgreSQL
      env:
        PGPASSWORD: postgres
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if psql -h localhost -p 5433 -U postgres -d postgres -c "SELECT 1" > /dev/null 2>&1; then
            echo "PostgreSQL is ready"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 2
        done
        
        # Apply optimizations to the "optimized" instance
        psql -h localhost -p 5433 -U postgres -d postgres <<EOF
        ALTER SYSTEM SET fsync = off;
        ALTER SYSTEM SET synchronous_commit = off;
        ALTER SYSTEM SET full_page_writes = off;
        ALTER SYSTEM SET checkpoint_completion_target = 0.9;
        ALTER SYSTEM SET wal_buffers = '16MB';
        ALTER SYSTEM SET shared_buffers = '256MB';
        SELECT pg_reload_conf();
        EOF
        
        # Wait a bit for settings to take effect
        sleep 2
    
    - name: Run DEFAULT configuration test
      continue-on-error: true
      env:
        PGPASSWORD: postgres
        DB_PORT: 5432
      run: |
        chmod +x scripts/test_default.sh
        bash scripts/test_default.sh || echo "Test failed with exit code $?"
    
    - name: Run DEFAULT PARALLEL creation test
      continue-on-error: true
      env:
        PGPASSWORD: postgres
        DB_PORT: 5432
        RESULT_FILE: results/default_parallel.txt
      run: |
        chmod +x scripts/test_parallel.sh
        bash scripts/test_parallel.sh || echo "Test failed with exit code $?"
    
    - name: Run OPTIMIZED configuration test
      continue-on-error: true
      env:
        PGPASSWORD: postgres
        DB_PORT: 5433
      run: |
        chmod +x scripts/test_optimized.sh
        bash scripts/test_optimized.sh || echo "Test failed with exit code $?"
    
    - name: Run OPTIMIZED PARALLEL creation test
      continue-on-error: true
      env:
        PGPASSWORD: postgres
        DB_PORT: 5433
        RESULT_FILE: results/optimized_parallel.txt
      run: |
        chmod +x scripts/test_parallel.sh
        bash scripts/test_parallel.sh || echo "Test failed with exit code $?"
    
    - name: Run TEMPLATE database test
      continue-on-error: true
      env:
        PGPASSWORD: postgres
        DB_PORT: 5433
      run: |
        chmod +x scripts/test_template.sh
        bash scripts/test_template.sh || echo "Test failed with exit code $?"
    
    - name: Run TMPFS test
      continue-on-error: true
      env:
        PGPASSWORD: postgres
        DB_PORT: 5434
      run: |
        chmod +x scripts/test_tmpfs.sh
        # Create a modified version for tmpfs test
        sed 's/5433/5434/g' scripts/test_tmpfs.sh > scripts/test_tmpfs_ci.sh
        bash scripts/test_tmpfs_ci.sh || echo "Test failed with exit code $?"
    
    - name: Run TMPFS PARALLEL creation test
      continue-on-error: true
      env:
        PGPASSWORD: postgres
        DB_PORT: 5434
        RESULT_FILE: results/tmpfs_parallel.txt
      run: |
        chmod +x scripts/test_parallel.sh
        bash scripts/test_parallel.sh || echo "Test failed with exit code $?"
    
    - name: Generate summary report
      run: |
        # Read results
        DEFAULT_SEQ=$(cat results/default_sequential.txt 2>/dev/null || echo "0")
        DEFAULT_PAR=$(cat results/default_parallel.txt 2>/dev/null || echo "0")
        OPTIMIZED_SEQ=$(cat results/optimized_sequential.txt 2>/dev/null || echo "0")
        OPTIMIZED_PAR=$(cat results/optimized_parallel.txt 2>/dev/null || echo "0")
        TMPFS_SEQ=$(cat results/tmpfs_sequential.txt 2>/dev/null || echo "0")
        TMPFS_PAR=$(cat results/tmpfs_parallel.txt 2>/dev/null || echo "0")
        TEMPLATE_TIME=$(cat results/template.txt 2>/dev/null || echo "0")
        
        # Create markdown summary
        cat > results/summary.md <<EOF
        # PostgreSQL Table Creation Benchmark Results (GitHub Actions)
        
        ## Results
        
        | Configuration | Method | Time (ms) |
        |--------------|--------|-----------|
        | Default | Sequential | ${DEFAULT_SEQ} |
        | Default | Parallel | ${DEFAULT_PAR} |
        | Optimized | Sequential | ${OPTIMIZED_SEQ} |
        | Optimized | Parallel | ${OPTIMIZED_PAR} |
        | TMPFS | Sequential | ${TMPFS_SEQ} |
        | TMPFS | Parallel | ${TMPFS_PAR} |
        
        ## Additional
        - Template DB creation time: ${TEMPLATE_TIME} ms
        EOF
        
        cat results/summary.md
        # Also publish to the job summary so it's visible in the UI
        cat results/summary.md >> "$GITHUB_STEP_SUMMARY"
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: |
          results/
          sql/schema.sql